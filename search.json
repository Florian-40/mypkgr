[{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"comparison-with-our-microbenchmark-package-","dir":"Articles","previous_headings":"","what":"Comparison with our microbenchmark package.","title":"execution_time","text":"can find microbenchmark package Git-Hub page : https://github.com/Florian-40/microbenchmark.git  multidimensionnal, get :","code":"mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),                      mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),                      times=1000L)  mb #> Unit: microseconds #>                                           expr  min   lq    mean median    uq #>                 mvtnorm::dmvnorm(rep(1.96, 2)) 40.4 44.6 77.2158  47.90 53.90 #>  mvnpdf(x = matrix(rep(1.96, 2)), Log = FALSE) 36.9 40.4 44.6588  43.25 47.55 #>      max neval #>  28094.1  1000 #>    420.4  1000 expression<-c('dmvnorm', 'mvnpdf') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale. n <- 100 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                       expr   min    lq    mean #>         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  46.0  48.2  53.266 #>  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 558.2 569.1 578.344 #>  median     uq   max neval #>   51.10  54.65 112.0   100 #>  576.55 584.85 672.3   100 expression<-c('dmvnorm', 'mvnpdf') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"profiling","dir":"Articles","previous_headings":"","what":"Profiling","title":"execution_time","text":"using lines terminal, can check profiling code :","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + })"},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"mvnpdfsmartfunction-","dir":"Articles","previous_headings":"Profiling","what":"mvnpdfsmartfunction.","title":"execution_time","text":"can use new function mvnpdfmart check profile similar code : can compare results microbenchmark :","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + }) n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr    min      lq #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   72.6   79.80 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 6681.0 6831.45 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4861.6 4974.10 #>      mean  median      uq     max neval #>   110.750  106.25  117.70   526.3   100 #>  7364.361 6901.40 7013.20 13641.1   100 #>  5361.634 5053.65 5163.75 12045.1   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"mvnpdfoptim-function-","dir":"Articles","previous_headings":"Profiling","what":"mvnpdfoptim function.","title":"execution_time","text":"can use new function mvnpdfmart check profile similar code : can compare results microbenchmark:","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + }) n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr    min      lq #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   72.5   93.70 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 6682.2 6768.05 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4820.4 4926.55 #>  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3789.4 3918.30 #>      mean median      uq     max neval #>   117.605  110.8  125.45   404.3   100 #>  7125.344 6845.7 6969.10 12316.6   100 #>  6166.645 4955.6 5104.65 88227.4   100 #>  4411.420 4049.1 4159.65  9745.0   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"using-rccp-armadillo-functions-","dir":"Articles","previous_headings":"","what":"Using Rccp Armadillo functions.","title":"execution_time","text":"write better inversion matrix C++ language include mvnpdfsmart. Thus, get microbenchmark :  Now, use complete implementation mvnpdfsmart C++.","code":"n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr    min      lq #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))   76.0  104.20 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 6655.7 6833.80 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4860.1 4948.85 #>  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3807.4 3993.15 #>  mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4839.6 4943.75 #>      mean  median      uq     max neval #>   124.415  116.55  133.10   331.9   100 #>  7127.591 6910.10 6987.20 11395.1   100 #>  5306.996 5033.90 5135.35  9636.5   100 #>  4356.404 4102.20 4186.05  8953.0   100 #>  5243.326 5004.15 5112.55  9705.5   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim', 'mvnpdf_invC') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale. Rcpp::sourceCpp(\"../src/mvnpdfC.cpp\") n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                                                                  expr #>                                                    mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)) #>                                             mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>  mvnpdfC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2),      varcovM = diag(2), Log = FALSE) #>     min      lq     mean  median      uq     max neval #>    76.3  100.05  113.359  110.90  125.50   357.5   100 #>  6653.4 6801.55 7283.666 6881.65 6963.20 12483.6   100 #>  4844.3 4954.10 5505.369 5068.30 5144.05 10673.4   100 #>  3787.9 3965.45 4143.355 4051.30 4111.05  9499.1   100 #>  4809.7 4946.60 5224.930 5015.60 5108.65 10291.5   100 #>    35.1   43.85   66.867   49.30   53.20  1343.3   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim', 'mvnpdf_invC', 'mvnpdfC') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"parallel-code","dir":"Articles","previous_headings":"","what":"Parallel code","title":"execution_time","text":"going learn use parallel code.","code":""},{"path":"https://florian-40.github.io/mypkgr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Robert. Author, maintainer.","code":""},{"path":"https://florian-40.github.io/mypkgr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Robert F (2022). mypkgr: 1st package. https://github.com/Florian-40/mypkgr, https://florian-40.github.io/mypkgr/.","code":"@Manual{,   title = {mypkgr: My 1st package},   author = {Florian Robert},   year = {2022},   note = {https://github.com/Florian-40/mypkgr, https://florian-40.github.io/mypkgr/}, }"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"mypkgr","dir":"","previous_headings":"","what":"My 1st package","title":"My 1st package","text":"goal mypkgr calculate values multivariate gaussian density learning build R package.","code":""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"My 1st package","text":"can install development version mypkgr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Florian-40/mypkgr\")"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"My 1st package","text":"basic example shows solve common problem:","code":""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"univariate-density","dir":"","previous_headings":"Example","what":"Univariate density","title":"My 1st package","text":"","code":"library(mypkgr) mvnpdf(x=matrix(c(1.96,-0.5), ncol=2), Log=FALSE) #> $x #>      [,1] [,2] #> [1,] 1.96 -0.5 #>  #> $y #> [1] 0.05844094 0.35206533 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"bivariate-density","dir":"","previous_headings":"Example","what":"Bivariate density","title":"My 1st package","text":"","code":"mvnpdf(x=matrix(rep(1.96,2),nrow=2, ncol=1),Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #> [2,] 1.96 #>  #> $y #> [1] 0.003415344 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"graphical-representation","dir":"","previous_headings":"Example","what":"Graphical representation.","title":"My 1st package","text":"","code":"pdfvalues <- mvnpdf(x=matrix(seq(-3,3, by=0.1), nrow=1), Log=FALSE) plot(pdfvalues)"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"cfunctions","dir":"","previous_headings":"","what":"C++functions.","title":"My 1st package","text":"use C++ function, use code : inversion matrix :","code":"Rcpp::sourceCpp(\"src/timesTwo.cpp\") #>  #> > timesTwo(42) #> [1] 84 timesTwo(12.5) #> [1] 25 Rcpp::sourceCpp(\"src/invC.cpp\") A<-matrix(c(2,4,7,8,9,5,6,5,4), nrow=3, ncol=3) invC(A) #>            [,1]        [,2]       [,3] #> [1,] -0.1309524  0.02380952  0.1666667 #> [2,] -0.2261905  0.40476190 -0.1666667 #> [3,]  0.5119048 -0.54761905  0.1666667"},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inverse of a matrix — invC","title":"Compute the inverse of a matrix — invC","text":"Compute inverse matrix","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inverse of a matrix — invC","text":"","code":"invC(A)"},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inverse of a matrix — invC","text":"matrix","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithm with parallel — log_par","title":"logarithm with parallel — log_par","text":"logarithm parallel","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithm with parallel — log_par","text":"","code":"log_par(x)"},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithm with parallel — log_par","text":"x vector calculate logarithm","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithm with parallel — log_par","text":"logarithm coordinate x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithm sequentiel — log_seq","title":"logarithm sequentiel — log_seq","text":"logarithm sequentiel","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithm sequentiel — log_seq","text":"","code":"log_seq(x)"},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithm sequentiel — log_seq","text":"x vector","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithm sequentiel — log_seq","text":"vector logarithm x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logarithm sequentiel — log_seq","text":"","code":"log_seq(1:100) #>   [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101 #>   [8] 2.0794415 2.1972246 2.3025851 2.3978953 2.4849066 2.5649494 2.6390573 #>  [15] 2.7080502 2.7725887 2.8332133 2.8903718 2.9444390 2.9957323 3.0445224 #>  [22] 3.0910425 3.1354942 3.1780538 3.2188758 3.2580965 3.2958369 3.3322045 #>  [29] 3.3672958 3.4011974 3.4339872 3.4657359 3.4965076 3.5263605 3.5553481 #>  [36] 3.5835189 3.6109179 3.6375862 3.6635616 3.6888795 3.7135721 3.7376696 #>  [43] 3.7612001 3.7841896 3.8066625 3.8286414 3.8501476 3.8712010 3.8918203 #>  [50] 3.9120230 3.9318256 3.9512437 3.9702919 3.9889840 4.0073332 4.0253517 #>  [57] 4.0430513 4.0604430 4.0775374 4.0943446 4.1108739 4.1271344 4.1431347 #>  [64] 4.1588831 4.1743873 4.1896547 4.2046926 4.2195077 4.2341065 4.2484952 #>  [71] 4.2626799 4.2766661 4.2904594 4.3040651 4.3174881 4.3307333 4.3438054 #>  [78] 4.3567088 4.3694479 4.3820266 4.3944492 4.4067192 4.4188406 4.4308168 #>  [85] 4.4426513 4.4543473 4.4659081 4.4773368 4.4886364 4.4998097 4.5108595 #>  [92] 4.5217886 4.5325995 4.5432948 4.5538769 4.5643482 4.5747110 4.5849675 #>  [99] 4.5951199 4.6051702"},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"Calcule les images par la fonction de densité d'une gaussienne multivariée","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"","code":"mvnpdfC(x, mean, varcovM, Log = TRUE)  mvnpdf(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdf_invC(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdfoptim(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdfsmart(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)"},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"x pxn matrice avec n le nombre de d'observation et p le nombre de dimension mean vecteur de moyenne de la gaussienne (de taille px1) varcovM matrice de covariance de la gaussienne (de taille pxp) Log si True, retournera le logarithme des densités. Par défaut, la valeur est TRUE.","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"une liste contenant la matrice d'entrée x et y les valeurs de la densité de la gaussienne multivariée en x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"","code":"mvnpdf(x=matrix(1.96), Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #>  #> $y #> [1] 0.05844094 #>  #> attr(,\"class\") #> [1] \"mvnpdf\" dnorm(1.96) #> [1] 0.05844094  mvnpdf(x=matrix(rep(1.96, 2), nrow=2, ncol=1), Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #> [2,] 1.96 #>  #> $y #> [1] 0.003415344 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/reference/mypkgr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mypkgr: My 1st package — mypkgr-package","title":"mypkgr: My 1st package — mypkgr-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://florian-40.github.io/mypkgr/reference/mypkgr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mypkgr: My 1st package — mypkgr-package","text":"Maintainer: Florian Robert florian.robert40@live.com (ORCID)","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the mvnpdf function — plot.mvnpdf","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"Plot mvnpdf function","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"","code":"# S3 method for mvnpdf plot(x, ...)"},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"x object class mvnpdf resulting call mvnpdf() function. ... graphical parameters passed plot() function.","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"Nothing returned, plot given","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"","code":"pdfvalues <- mvnpdf(x=matrix(seq(-3,3, by=0.1), nrow=1), Log=FALSE) plot(pdfvalues)"}]
