[{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"comparison-with-our-microbenchmark-package-","dir":"Articles","previous_headings":"","what":"Comparison with our microbenchmark package.","title":"execution_time","text":"can find microbenchmark package Git-Hub page : https://github.com/Florian-40/microbenchmark.git  multidimensionnal, get :","code":"mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),                      mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),                      times=1000L)  mb #> Unit: microseconds #>                                           expr    min     lq     mean median #>                 mvtnorm::dmvnorm(rep(1.96, 2)) 30.959 32.334 40.69916 33.001 #>  mvnpdf(x = matrix(rep(1.96, 2)), Log = FALSE) 28.001 28.834 34.15966 29.251 #>      uq      max neval #>  34.001 5013.376  1000 #>  30.167 3981.667  1000 expression<-c('dmvnorm', 'mvnpdf') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale. n <- 100 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                       expr     min       lq #>         mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  48.417  50.8545 #>  mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 388.709 408.4380 #>       mean   median       uq     max neval #>   55.20563  52.5215  55.5005 187.709   100 #>  425.75901 414.2715 438.1050 512.751   100 expression<-c('dmvnorm', 'mvnpdf') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"profiling","dir":"Articles","previous_headings":"","what":"Profiling","title":"execution_time","text":"using lines terminal, can check profiling code :","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + })"},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"mvnpdfsmartfunction-","dir":"Articles","previous_headings":"Profiling","what":"mvnpdfsmartfunction.","title":"execution_time","text":"can use new function mvnpdfmart check profile similar code : can compare results microbenchmark :","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + }) n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr      min #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  186.709 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4625.334 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3116.001 #>        lq      mean   median       uq       max neval #>   204.813  232.9069  228.980  249.167   367.084   100 #>  4745.834 5356.3748 4985.896 5519.146 12819.167   100 #>  3196.563 3491.0852 3260.834 3352.188  7739.584   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"mvnpdfoptim-function-","dir":"Articles","previous_headings":"Profiling","what":"mvnpdfoptim function.","title":"execution_time","text":"can use new function mvnpdfmart check profile similar code : can compare results microbenchmark:","code":"profvis::profvis({ + n <- 10e4 + pdfval <- mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE) + }) n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr      min #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  187.501 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4611.667 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3135.084 #>  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2269.709 #>         lq      mean    median       uq       max neval #>   196.2505  221.0369  212.2925  233.730   359.125   100 #>  4731.9800 5172.8469 4829.4380 5014.104 12608.917   100 #>  3212.7090 3446.0774 3266.3340 3345.209  6555.709   100 #>  2334.1045 2437.6095 2396.3545 2461.209  4984.167   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":"https://florian-40.github.io/mypkgr/articles/execution_time.html","id":"using-rccp-armadillo-functions-","dir":"Articles","previous_headings":"","what":"Using Rccp Armadillo functions.","title":"execution_time","text":"write better inversion matrix C++ language include mvnpdfsmart. Thus, get microbenchmark :  Now, use complete implementation mvnpdfsmart C++.","code":"n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                            expr      min #>              mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2))  189.501 #>       mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 4635.125 #>  mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3141.125 #>  mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 2280.167 #>  mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) 3131.292 #>        lq      mean    median       uq       max neval #>   206.417  224.2573  217.0835  240.334   326.500   100 #>  4735.751 5016.9469 4798.5215 5062.979  8514.334   100 #>  3211.605 3504.9347 3260.2505 3365.896 10930.084   100 #>  2348.480 2572.4211 2415.8130 2485.521  5463.209   100 #>  3186.354 3413.7719 3238.6470 3355.251  7055.668   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim', 'mvnpdf_invC') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale. Rcpp::sourceCpp(\"/Users/florianrobert/R/mypkgr/src/mvnpdfC.cpp\") n <- 1000 mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),                      mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfoptim(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),                      mvnpdfC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE),                      times=100L) mb #> Unit: microseconds #>                                                                                                  expr #>                                                    mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)) #>                                             mvnpdf(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdfsmart(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdfoptim(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>                                        mvnpdf_invC(x = matrix(1.96, nrow = 2, ncol = n), Log = FALSE) #>  mvnpdfC(x = matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2),      varcovM = diag(2), Log = FALSE) #>       min        lq       mean   median        uq      max neval #>   188.334  206.7715  223.90524  223.938  238.5840  310.001   100 #>  4611.875 4762.4795 5044.67563 4889.688 5042.1260 7436.750   100 #>  3124.959 3199.6465 3525.84027 3288.917 3367.6045 6182.917   100 #>  2281.292 2331.5005 2521.18610 2365.459 2469.8760 9160.543   100 #>  3126.626 3193.4175 3389.18365 3282.209 3352.8755 6469.875   100 #>    52.751   59.1045   77.78442   67.730   74.8545  984.792   100 expression<-c('dmvnorm', 'mvnpdf', 'mvnpdfsmart', 'mvnpdfoptim', 'mvnpdf_invC', 'mvnpdfC') autoplot(mb, expression) #> Scale for 'y' is already present. Adding another scale for 'y', which will #> replace the existing scale."},{"path":[]},{"path":"https://florian-40.github.io/mypkgr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Florian Robert. Author, maintainer.","code":""},{"path":"https://florian-40.github.io/mypkgr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Robert F (2022). mypkgr: 1st package. https://github.com/Florian-40/mypkgr, https://florian-40.github.io/mypkgr/.","code":"@Manual{,   title = {mypkgr: My 1st package},   author = {Florian Robert},   year = {2022},   note = {https://github.com/Florian-40/mypkgr, https://florian-40.github.io/mypkgr/}, }"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"mypkgr","dir":"","previous_headings":"","what":"My 1st package","title":"My 1st package","text":"goal mypkgr calculate values multivariate gaussian density learning build R package.","code":""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"My 1st package","text":"can install development version mypkgr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Florian-40/mypkgr\")"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"My 1st package","text":"basic example shows solve common problem:","code":""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"univariate-density","dir":"","previous_headings":"Example","what":"Univariate density","title":"My 1st package","text":"","code":"library(mypkgr) mvnpdf(x=matrix(c(1.96,-0.5), ncol=2), Log=FALSE) #> $x #>      [,1] [,2] #> [1,] 1.96 -0.5 #>  #> $y #> [1] 0.05844094 0.35206533 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"bivariate-density","dir":"","previous_headings":"Example","what":"Bivariate density","title":"My 1st package","text":"","code":"mvnpdf(x=matrix(rep(1.96,2),nrow=2, ncol=1),Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #> [2,] 1.96 #>  #> $y #> [1] 0.003415344 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"graphical-representation","dir":"","previous_headings":"Example","what":"Graphical representation.","title":"My 1st package","text":"","code":"pdfvalues <- mvnpdf(x=matrix(seq(-3,3, by=0.1), nrow=1), Log=FALSE) plot(pdfvalues)"},{"path":"https://florian-40.github.io/mypkgr/index.html","id":"cfunctions","dir":"","previous_headings":"","what":"C++functions.","title":"My 1st package","text":"use C++ function, use code : inversion matrix :","code":"Rcpp::sourceCpp(\"src/timesTwo.cpp\") #>  #> > timesTwo(42) #> [1] 84 timesTwo(12.5) #> [1] 25 Rcpp::sourceCpp(\"src/invC.cpp\") A<-matrix(c(2,4,7,8,9,5,6,5,4), nrow=3, ncol=3) invC(A) #>            [,1]        [,2]       [,3] #> [1,] -0.1309524  0.02380952  0.1666667 #> [2,] -0.2261905  0.40476190 -0.1666667 #> [3,]  0.5119048 -0.54761905  0.1666667"},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inverse of a matrix — invC","title":"Compute the inverse of a matrix — invC","text":"Compute inverse matrix","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inverse of a matrix — invC","text":"","code":"invC(A)"},{"path":"https://florian-40.github.io/mypkgr/reference/invC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the inverse of a matrix — invC","text":"matrix","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithm with parallel — log_par","title":"logarithm with parallel — log_par","text":"logarithm parallel","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithm with parallel — log_par","text":"","code":"log_par(x)"},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithm with parallel — log_par","text":"x vector calculate logarithm","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithm with parallel — log_par","text":"logarithm coordinate x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithm sequentiel — log_seq","title":"logarithm sequentiel — log_seq","text":"logarithm sequentiel","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithm sequentiel — log_seq","text":"","code":"log_seq(x)"},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithm sequentiel — log_seq","text":"x vector","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithm sequentiel — log_seq","text":"vector logarithm x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/log_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logarithm sequentiel — log_seq","text":"","code":"log_seq(1:100) #>   [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101 #>   [8] 2.0794415 2.1972246 2.3025851 2.3978953 2.4849066 2.5649494 2.6390573 #>  [15] 2.7080502 2.7725887 2.8332133 2.8903718 2.9444390 2.9957323 3.0445224 #>  [22] 3.0910425 3.1354942 3.1780538 3.2188758 3.2580965 3.2958369 3.3322045 #>  [29] 3.3672958 3.4011974 3.4339872 3.4657359 3.4965076 3.5263605 3.5553481 #>  [36] 3.5835189 3.6109179 3.6375862 3.6635616 3.6888795 3.7135721 3.7376696 #>  [43] 3.7612001 3.7841896 3.8066625 3.8286414 3.8501476 3.8712010 3.8918203 #>  [50] 3.9120230 3.9318256 3.9512437 3.9702919 3.9889840 4.0073332 4.0253517 #>  [57] 4.0430513 4.0604430 4.0775374 4.0943446 4.1108739 4.1271344 4.1431347 #>  [64] 4.1588831 4.1743873 4.1896547 4.2046926 4.2195077 4.2341065 4.2484952 #>  [71] 4.2626799 4.2766661 4.2904594 4.3040651 4.3174881 4.3307333 4.3438054 #>  [78] 4.3567088 4.3694479 4.3820266 4.3944492 4.4067192 4.4188406 4.4308168 #>  [85] 4.4426513 4.4543473 4.4659081 4.4773368 4.4886364 4.4998097 4.5108595 #>  [92] 4.5217886 4.5325995 4.5432948 4.5538769 4.5643482 4.5747110 4.5849675 #>  [99] 4.5951199 4.6051702"},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"Calcule les images par la fonction de densité d'une gaussienne multivariée","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"","code":"mvnpdfC(x, mean, varcovM, Log = TRUE)  mvnpdf(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdf_invC(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdfoptim(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)  mvnpdfsmart(x, mean = rep(0, nrow(x)), varcovM = diag(nrow(x)), Log = TRUE)"},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"x pxn matrice avec n le nombre de d'observation et p le nombre de dimension mean vecteur de moyenne de la gaussienne (de taille px1) varcovM matrice de covariance de la gaussienne (de taille pxp) Log si True, retournera le logarithme des densités. Par défaut, la valeur est TRUE.","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"une liste contenant la matrice d'entrée x et y les valeurs de la densité de la gaussienne multivariée en x","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/mvnpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Based on the implementation from Nino Hardt and Dicko Ahmadou\nhttp://gallery.rcpp.org/articles/dmvnorm_arma/\n(accessed in August 2014) — mvnpdfC","text":"","code":"mvnpdf(x=matrix(1.96), Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #>  #> $y #> [1] 0.05844094 #>  #> attr(,\"class\") #> [1] \"mvnpdf\" dnorm(1.96) #> [1] 0.05844094  mvnpdf(x=matrix(rep(1.96, 2), nrow=2, ncol=1), Log=FALSE) #> $x #>      [,1] #> [1,] 1.96 #> [2,] 1.96 #>  #> $y #> [1] 0.003415344 #>  #> attr(,\"class\") #> [1] \"mvnpdf\""},{"path":"https://florian-40.github.io/mypkgr/reference/mypkgr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mypkgr: My 1st package — mypkgr-package","title":"mypkgr: My 1st package — mypkgr-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://florian-40.github.io/mypkgr/reference/mypkgr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mypkgr: My 1st package — mypkgr-package","text":"Maintainer: Florian Robert florian.robert40@live.com (ORCID)","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of the mvnpdf function — plot.mvnpdf","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"Plot mvnpdf function","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"","code":"# S3 method for mvnpdf plot(x, ...)"},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"x object class mvnpdf resulting call mvnpdf() function. ... graphical parameters passed plot() function.","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"Nothing returned, plot given","code":""},{"path":"https://florian-40.github.io/mypkgr/reference/plot.mvnpdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of the mvnpdf function — plot.mvnpdf","text":"","code":"pdfvalues <- mvnpdf(x=matrix(seq(-3,3, by=0.1), nrow=1), Log=FALSE) plot(pdfvalues)"}]
