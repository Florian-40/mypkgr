usethis::use_package_doc()
usethis::use_rcpp()
Rcpp::sourceCpp("src/timesTwo.cpp")
RcppArmadillo::RcppArmadillo.package.skeleton("mypkgr")
library(mypkgr)
RcppArmadillo::RcppArmadillo.package.skeleton("mypkgr")
library(mypkgr)
Rcpp::sourceCpp("mypkgr/src/rcpparma_hello_world.cpp")
Rcpp::sourceCpp("/Users/florianrobert/R/mypkgr/mypkgr/src/rcpparma_hello_world.cpp")
rcpparma_hello_word()
library(mypkgr)
rcpparma_hello_world()
library(mypkgr)
Rcpp::sourceCpp("mypkgr/src/rcpparma_hello_world.cpp")
library(mypkgr)
?mypkgr
Rcpp::sourceCpp("src/timesTwo.cpp")
library(mypkgr)
usethis::use_rcpp_armadillo()
usethis::use_package_doc()
library(mypkgr)
usethis::use_package_doc()
library(mypkgr)
?mypkgr
?mvnpdf
source("~/R/mypkgr/R/mypkgr-package.R")
usethis::use_rcpp_armadillo()
devtools::document()
devtools::document()
library(mypkgr)
usethis::use_package_doc()
usethis::use_rcpp()
library(mypkgr)
devtools::document()
Rcpp::sourceCpp("src/timesTwo.cpp")
timesTwo(40)
usethis::use_rcpp_armadillo()
library(mypkgr)
devtools::document()
Rcpp::sourceCpp("src/timesTwo.cpp")
?timesTwo
?mypkgr
Rcpp::sourceCpp("src/invC.cpp")
?invC
A<- matrix(c(4,6,8,7,5,3,9,6,7), ncol=3, nrow=3)
invC(A )
library(mypkgr)
A<- matrix(c(4,6,8,7,5,3,9,6,7), ncol=3, nrow=3)
+invC(A )
A<- matrix(c(4,6,8,7,5,3,9,6,7), ncol=3, nrow=3)
invC(A)
Rcpp::sourceCpp("src/invC.cpp")
invC(A)
library(mypkgr)
Rcpp::sourceCpp("src/invC.cpp")
A
invC(A)
library(microbenchmark)
?autoplot.microbenchmark
installed.packages()
detach("package:microbenchmark", unload = TRUE)
?autoplot.microbenchmark
installed.packages('microbenchmark')
installed.packages('microbenchmar')
installed.packages('microbencczanjcdar')
installed.packages(ggplot2)
installed.packages('ggplot2'')
installed.packages('ggplot2')
installed.packages()
installed.packages(max.print=100)
installed.packages('remotes')
library(remotes)
installed.packages('abdgy')
install_github("Florian-40/microbenchmark")
library(microbenchmark)
remove.packages("microbenchmark")
library(microbenchmark)
install_github(Florian-40/microbenchmark)
install_github("Florian-40/microbenchmark")
library(microbenchmark)
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(microbenchmark)
library(mypkgr)
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE)
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb <- microbenchmark::microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
remotes::install_github("joshuaulrich/microbenchmark")
remove.packages("microbenchmark")
installed.packages()
installed.packages(m)
installed.packages(ggplot2)
installed.packages('m')
version(ggplot2)
version('ggplot2')
Version('ggplot2')
Version()
library(microbenchmark)
install.packages("~/R/microbenchmark_1.4.9.tar.gz", repos = NULL, type = "source")
remove.packages("microbenchmark")
install.packages("microbenchmark")
library(microbenchmark)
?autoplot.microbenchmark
library(microbenchmark)
?autoplot.microbenchmark
?autoplot.microbenchmark
?mvnpdf
library(mypkgr)
?mvnpdf
?autoplot.microbenchmark
.rs.restartR()
library(microbenchmark)
?autoplot.microbenchmark
library(microbenchmark)
?autoplot.microbenchmark
library(microbenchmark)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
?microbenchmark
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(mypkgr)
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(microbenchmark)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(microbenchmark)
remove.packages("microbenchmark")
library(microbenchmark)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(microbenchmark)
remove.packages(microbenchmark)
library(microbenchmark)
library(microbenchmark)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(mypkgr)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
?autoplot.microbenchmark
expression<-c('dmvnorm', 'mvnpdf')
print(autoplot(mb, expression))
print(autoplot.microbechmark(mb, expression))
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
library(ggplot2)
print(autoplot(mb, expression))
?autoplot.microbenchmark
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),c(0.1,1,0.1))))
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),c(0.1,1,0.2))))
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),c(0.2,1,0.2))))
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),c(0.2,1,0.1))))
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),c(0.2,10,0.1))))
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
library(microbenchmark)
library(mypkgr)
library(ggplot2)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb
expression<-c('dmvnorm', 'mvnpdf')
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
remove.packages("microbenchmark")
devtools::install_github("Florian-40/microbenchmark")
devtools::install_github("Florian-40/microbenchmark")
devtools::install_github("Florian-40/microbenchmark", force=TRUE)
library(microbenchmark)
library(mypkgr)
library(ggplot2)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb
expression<-c('dmvnorm', 'mvnpdf')
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
library(microbenchmark)
library(mypkgr)
library(ggplot2)
# unidimensionnel
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb
expression<-c('dmvnorm', 'mvnpdf')
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
n <- 100
mb <- microbenchmark(mvtnorm::dmvnorm(matrix(1.96, nrow = n, ncol = 2)),
mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE),
times=100L)
mb
print(autoplot(mb, expression, breaks=c(0.1,1), minor_breaks=c(seq(0,0.1,0.01),seq(0.1,1,0.1))))
n <- 10e4
pdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
profvis::profvis({
n <- 10e4
pdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
})
source("~/R/mypkgr/R/mvnpdfsmart.R")
profvis::profvis({})
profvis::profvis({
n <- 10e4
pdfval <- mvnpdf(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
})
library(mypkgr)
profvis::profvis({
n <- 10e4
pdfval <- mvnpdfsmart(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
})
library(mypkgr)
devtools::document()
library(mypkgr)
library(mypkgr)
devtools::document()
library(mypkgr)
search()
rm()
ls()
rm(list=ls())
library(mypkgr)
library(mypkgr)
usethis::use_rmarkdown_template()
#' mvnpdfsmart with inversion matrix with C++ code
#'
#' @param x
#' @param mean
#' @param varcovM
#' @param Log
#'
#' @return
#' @rdname mvnpdf
#' @export
#'
#' @examples
#'
mvnpdf_invC <- function(x, mean =  rep(0, nrow(x)),
library(mypkgr)
devtools::document()
library(mypkgr)
mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
n<-1000
mvnpdf_invC(x=matrix(1.96, nrow = 2, ncol = n), Log=FALSE)
A<-matrix(c(2,4,7,8,9,5,6,5,4), nrow=3, ncol=3)
invC(A)
#' mvnpdfsmart with inversion matrix with C++ code
#'
#' @return
#' @rdname mvnpdf
#' @export
#'
library(mypkgr)
devtools::document()
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
mvnpdf(x=matrix(rep(1.96,2)), Log=FALSE),
times=1000L)
mb
mb <- microbenchmark(mvtnorm::dmvnorm(rep(1.96, 2)),
library(mypkgr)
View(A)
usethis::use_vignette("execution_time")
devtools::document()
knit_with_parameters("~/R/mypkgr/vignettes/execution_time.Rmd")
knit_with_parameters("~/R/mypkgr/vignettes/execution_time.Rmd")
library(mypkgr)
devtools::document()
library(mypkgr)
Rcpp::sourceCpp("src/mvnpdfC.cpp")
mvnpdfC(x=matrix(1.96, nrow = 2, ncol = n), mean = rep(0, 2), varcovM = diag(2), Log=FALSE)
library(mypkgr)
library(mypkgr)
devtools::document()
rm(list=ls())
library(mypkgr)
devtools::document()
library(mypkgr)
Rcpp::sourceCpp("src/mvnpdfC.cpp")
devtools::build_vignettes()
library(mypkgr)
log(1:100)
1:100
library(mypkgr)
devtools::document()
rm(list=ls())
library(mypkgr)
devtools::document()
library(mypkgr)
?log_par
log_par(1:100)
library(mypkgr)
library(mypkgr)
library(parallel)
library(doParallel)
install.packages('doParallel')
library(mypkgr)
log_par(1:100)
x<-1:100
foreach(i=1:length(x), .combine='c') %dopar% {
log(x[i])
}
foreach(i=1:length(x), .combine='c') foreach::`%dopar%` {
log(x[i])
}
foreach(i=1:length(x), .combine='c') foreach::`%dopar%` {
log(x[1])
}
foreach(i=1:length(x), .combine='c') foreach::`%dopar%` (log(x[1]))
foreach::foreach(i=1:length(x), .combine='c') foreach::`%dopar%` (log(x[1]))
foreach::foreach(i=1:length(x), .combine='c')%dopar% {
log(x[i])
}
library(foreach)
foreach(i=1:length(x), .combine='c') %dopar% {
log(x[i])
}
usethis::use_package('foreach')
library(mypkgr)
devtools::document()
library(mypkgr)
log_par(1:100)
log(1:100)
library(mypkgr)
library(devtools)
document()
library(mypkgr)
log_par(1:100)
library(mypkgr)
document()
document()
document()
document()
library(mypkgr)
?log_par
log_par(1:100)
library(mypkgr)
document()
library(mypkgr)
document()
library(mypkgr)
usethis::use_package("doParallel")
document()
library(mypkgr)
document()
?foreach
library(mypkgr)
library(mypkgr)
